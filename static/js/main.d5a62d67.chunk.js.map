{"version":3,"sources":["content/post1/image1.jpg","content/post1/text1.txt","sections/header/Header.js","sections/post/Post.js","sections/body/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","expand","Brand","src","width","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","href","Text","Post","useState","textBody","setTextBody","useEffect","a","fetch","SomeTextUrl","response","text","getTextFromFile","Row","Col","xs","span","offset","Image","SomeImage","fluid","rounded","Card","Body","Title","SomePostDetails","title","split","map","paragraph","key","dangerouslySetInnerHTML","__html","Container","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,uQC+B5BC,MA3Bf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACpC,kBAACH,EAAA,EAAOI,MAAR,KACI,yBACIC,IAAI,yBACJC,MAAM,KACNC,OAAO,KACPC,UAAU,2BACVC,IAAI,yBACL,IAPP,sBAUA,kBAACT,EAAA,EAAOU,OAAR,CAAeC,gBAAc,qBAC7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACX,kBAACM,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAAf,eACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAAf,mBAEJ,kBAAChB,EAAA,EAAOiB,KAAR,eACW,uBAAGD,KAAK,SAAR,aADX,MAC2C,uBAAGA,KAAK,SAAR,U,2HCqB5CE,MAnCf,WAAiB,IAAD,EACoBC,mBAAS,mBAD7B,mBACLC,EADK,KACKC,EADL,KAYZ,OATAC,qBAAU,YACe,uCAAG,8BAAAC,EAAA,sEACCC,MAAMC,KADP,cAChBC,EADgB,gBAEHA,EAASC,OAFN,OAEhBA,EAFgB,OAGpBN,EAAYM,GAHQ,2CAAH,qDAKrBC,KACD,CAACR,IAGA,oCACI,kBAACS,EAAA,EAAD,CAAKrB,UAAU,QACX,kBAACsB,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,EAAGC,OAAQ,IACvB,kBAACC,EAAA,EAAD,CAAO7B,IAAK8B,IAAWC,OAAK,EAACC,SAAO,MAG5C,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,GAAIC,OAAQ,IACxB,kBAACK,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYhC,UAAU,iCAAiCiC,EAAgBC,OACtEtB,EAASuB,MAAM,MAAMC,KAAI,SAACC,EAAWC,GAClC,OAAO,kBAACR,EAAA,EAAKrB,KAAN,CAAW6B,IAAKA,EAAKC,wBAAyB,CAACC,OAAQH,cCJ/EN,MAxBf,WACI,OACI,kBAACU,EAAA,EAAD,CAAWb,OAAK,EAAC5B,UAAU,OACvB,kBAAC0C,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAItB,UAAU,iCAAd,cAKR,kBAACqB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,uBAAGtB,UAAU,iCAAb,+EAMZ,kBAAC,EAAD,QCXG2C,MATf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5a62d67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.01d9dd27.jpg\";","module.exports = __webpack_public_path__ + \"static/media/text1.64e72dc1.txt\";","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand>\n                <img\n                    src=\"./apple-touch-icon.png\"\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"React Bootstrap logo\"\n                />{' '}\n                Shehroz's Thoughts\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#link\">Latest Post</Nav.Link>\n                    <Nav.Link href=\"#link\">Previous Posts</Nav.Link>\n                </Nav>\n                <Navbar.Text>\n                    About: <a href=\"#link\">This Blog</a> | <a href=\"#link\">Me</a>\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Header;\n","import React, {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\n\nimport SomeImage from '../../content/post1/image1.jpg';\nimport SomeTextUrl from '../../content/post1/text1.txt';\nimport SomePostDetails from '../../content/post1/data1.json';\n\nfunction Post() {\n    const [textBody, setTextBody] = useState('Loading text...');\n\n    useEffect(() => {\n        const getTextFromFile = async () => {\n            let response = await fetch(SomeTextUrl);\n            let text = await response.text();\n            setTextBody(text);\n        };\n        getTextFromFile();\n    }, [textBody]);\n\n    return (\n        <>\n            <Row className=\"mb-3\">\n                <Col xs={{span: 4, offset: 4}}>\n                    <Image src={SomeImage} fluid rounded/>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={{span: 10, offset: 1}}>\n                    <Card>\n                        <Card.Body>\n                            <Card.Title className=\"d-flex justify-content-center\">{SomePostDetails.title}</Card.Title>\n                            {textBody.split(\"\\n\").map((paragraph, key) => {\n                                return <Card.Text key={key} dangerouslySetInnerHTML={{__html: paragraph}}></Card.Text>\n                            })}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Post from '../post/Post';\n\nfunction Body() {\n    return (\n        <Container fluid className=\"p-0\">\n            <Jumbotron>\n                <Row>\n                    <Col>\n                        <h1 className=\"d-flex justify-content-center\">\n                            Welcome!\n                        </h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <p className=\"d-flex justify-content-center\">\n                            This blog is currently under construction. Please check back again soon!\n                        </p>\n                    </Col>\n                </Row>\n            </Jumbotron>\n            <Post></Post>\n        </Container>\n    );\n}\n\nexport default Body;","import React from 'react';\nimport './App.css';\nimport Header from './sections/header/Header';\nimport Body from './sections/body/Body';\n//import Footer from './sections/footer/Footer';\n\nfunction App() {\n    return (\n        <>\n            <Header></Header>\n            <Body></Body>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}